{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "/Users/rishisiddharth/Desktop/LSE_2024_2045/classes/Ds202W/Group_8 version 1.qmd---\n",
        "title: '*ds202w-2024-2025-group-8*'\n",
        "jupyter: python3\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "*Research Question:*  \n",
        "*By which criteria should we classify economies?  \n",
        "Does division based on GNI per capita levels make sense?*\n",
        "\n",
        "*Motivation:*\n",
        "Classifying national economies is a cornerstone of international policy-making, yet the prevailing reliance on gross national income (GNI) per capita as the primary—and often sole - criterion suffers from profound limitations. By distilling a country’s complex economic and social realities into a single monetary average, GNI per capita masks within-group heterogeneity, ignores non-monetary dimensions of well-being, and overlooks structural factors that underpin sustainable growth. For instance, two countries with similar GNI per capita may differ sharply in the health of their populations, the quality of their infrastructure, or the inclusiveness of their educational systems—differences that have direct implications for long-term resilience, social equity, and the effectiveness of policy interventions.\n",
        "\n",
        "To address these shortcomings, our study develops a development index built on 7 equally weighted thematic dimensions:\n",
        "\n",
        "1.⁠ ⁠*Income & Output*\n",
        "   Indicators: GDP, GDP per capita (GDPPC), GNI per capita (GNIPC), GNI per capita at PPP (GNIPCPPP)\n",
        "   These four metrics collectively capture both the scale of economic activity and its distribution across populations. GDP and GDP per capita measure aggregate and average output, while GNI per capita reflects income actually accruing to residents. Adjusting for purchasing power parity (PPP) with GNIPCPPP accounts for cost-of-living differences, making cross-country comparisons more meaningful. Together, they form the backbone of any development index by quantifying a country’s capacity to generate and sustain material well-being.\n",
        "\n",
        "2.⁠ ⁠*Infrastructure & Technology*\n",
        "   Indicators: Industry (including construction) value added (% of GDP), electric power consumption per capita, mobile cellular subscriptions, high-technology exports (% of manufactured exports)\n",
        "   Physical infrastructure and technological capability are critical enablers of productivity and diversification. The industry share signals the strength of manufacturing and construction sectors; electricity consumption per capita proxies for access to reliable power; and mobile subscriptions indicate the diffusion of basic ICT services. High-technology exports further spotlight a country’s ability to move up the value chain. By combining these variables, we assess the extent to which an economy has built the tangible and digital foundations needed for modern growth.\n",
        "\n",
        "3.⁠ ⁠*Trade & Investment*\n",
        "   Indicators: FDI net inflows, exports of goods & services (% of GDP), imports of goods & services (% of GDP), merchandise trade (% of GDP), high-technology exports (% of manufactured exports), gross capital formation (% of GDP)\n",
        "   Opening to global markets and attracting investment are key drivers of structural transformation. FDI inflows reflect investor confidence and technology transfer; trade ratios reveal a country’s integration into global value chains; and gross capital formation measures domestic investment in assets. Including high-technology exports a second time underscores its dual role as both a technological and trade indicator. This theme captures how external engagement and investment underpin both short-term growth and long-run competitiveness.\n",
        "\n",
        "4.⁠ ⁠*Human Capital*\n",
        "   Indicators: Secondary school enrollment (% gross), primary completion rate (%), number of start-up procedures to register a business\n",
        "   Education and entrepreneurship shape a workforce’s ability to innovate and adapt. Enrollment and completion rates quantify access to and success in formal schooling, which underpin skills development and productivity. The count of procedural steps for business registration reflects institutional support for new ventures, a proxy for the ease with which human capital can be mobilized into economic activity. Together, these measures gauge both the stock of human skills and the environment that allows those skills to translate into enterprise.\n",
        "\n",
        "5.⁠ ⁠*Environmental*\n",
        "   Indicators: CO₂ emissions per capita, forest area (sq. km), water productivity (GDP per cubic meter freshwater), value added in agriculture/forestry/fishing (% of GDP)\n",
        "   Sustainable development requires balancing economic activity with environmental stewardship. CO₂ emissions per capita signal the ecological footprint of industrialization; forest area indicates natural capital endowment and biodiversity; water productivity measures the efficiency of water use in generating GDP; and the share of primary-sector value added reflects dependence on resource-based activities. By integrating these variables, the index accounts for ecological vulnerability and the capacity to manage natural resources responsibly.\n",
        "\n",
        "6.⁠ ⁠*Institutional Factors*\n",
        "   Indicators: Military expenditure (% of GDP), total debt service (% of GNI), net ODA received per capita, personal remittances paid, merchandise trade (% of GDP)\n",
        "   Institutions and external financing shape a country’s policy space and resilience. Military spending reveals fiscal priorities and potential security risks; debt-service ratios capture macroeconomic sustainability; ODA per capita and remittances measure reliance on external transfers; and trade share (again) highlights the institutional frameworks that facilitate exchange. This theme evaluates how governance, financial obligations, and external support systems interact to influence development trajectories.\n",
        "\n",
        "7.⁠ ⁠*Health*\n",
        "   Indicators: HIV prevalence (% ages 15–49), under-5 mortality rate, measles immunization coverage (% of children 12–23 months), life expectancy at birth\n",
        "   Health outcomes both reflect and drive socio-economic progress. HIV prevalence and under-5 mortality identify persistent public-health challenges; immunization rates gauge preventive care coverage; and life expectancy summarizes overall population well-being. By including these metrics, the index captures how effectively countries convert resources into healthy, productive lives—an essential dimension often invisible in income-only classifications.\n",
        "\n",
        "\n",
        "By weaving together these dimensions, our development index not only positions GNI per capita within a broader developmental context but also tests whether multidimensional measurement can unearth policy‐relevant distinctions—highlighting, for instance, middle-income countries with robust human capital but weak infrastructure, or vice versa—that the GNI classification would obscure.\n"
      ],
      "id": "3a528b23"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "!pip install jsonlines\n",
        "!pip install missingno"
      ],
      "id": "31b2d3ae",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        " ================================\n",
        "# General Libraries\n",
        "# ================================\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import requests\n",
        "from bs4 import BeautifulSoup\n",
        "from tqdm import tqdm\n",
        "\n",
        "# ================================\n",
        "# Plotting and Visualization\n",
        "# ================================\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from matplotlib import pyplot as plt  \n",
        "from lets_plot import *\n",
        "LetsPlot.setup_html()\n",
        "\n",
        "# ================================\n",
        "# Statistical Analysis\n",
        "# ================================\n",
        "import scipy.stats as stats\n",
        "from scipy.stats import ttest_ind\n",
        "\n",
        "# ================================\n",
        "# Text Analysis and NLP\n",
        "# ================================\n",
        "from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n",
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "from sklearn.decomposition import TruncatedSVD\n",
        "\n",
        "# ================================\n",
        "# Machine Learning Models\n",
        "# ================================\n",
        "from sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier, RandomForestRegressor\n",
        "from sklearn.linear_model import LinearRegression, LogisticRegression\n",
        "from sklearn.cluster import DBSCAN, KMeans\n",
        "from sklearn.decomposition import PCA, LatentDirichletAllocation\n",
        "from sklearn.pipeline import Pipeline, make_pipeline\n",
        "from sklearn.tree import DecisionTreeClassifier  \n",
        "\n",
        "# ================================\n",
        "# Preprocessing and Imputation\n",
        "# ================================\n",
        "from sklearn.impute import KNNImputer, SimpleImputer\n",
        "from sklearn.preprocessing import MinMaxScaler, StandardScaler\n",
        "\n",
        "# ================================\n",
        "# Model Selection and Evaluation\n",
        "# ================================\n",
        "from sklearn.model_selection import (\n",
        "    GridSearchCV,\n",
        "    RandomizedSearchCV,\n",
        "    TimeSeriesSplit,\n",
        "    cross_val_score,\n",
        "    train_test_split\n",
        ")\n",
        "\n",
        "from sklearn.metrics import (\n",
        "    accuracy_score,\n",
        "    average_precision_score,\n",
        "    balanced_accuracy_score,\n",
        "    classification_report,\n",
        "    confusion_matrix,\n",
        "    f1_score,\n",
        "    make_scorer,\n",
        "    mean_absolute_error,\n",
        "    mean_squared_error,\n",
        "    precision_score,\n",
        "    recall_score,\n",
        "    r2_score,\n",
        "    roc_auc_score,\n",
        "    silhouette_score\n",
        ")\n",
        "\n",
        "from sklearn.inspection import permutation_importance\n",
        "\n",
        "# ================================\n",
        "# Data Sources\n",
        "# ================================\n",
        "import wbgapi as wb"
      ],
      "id": "3742ed3f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "data = pd.read_csv('wdi_data.csv')"
      ],
      "id": "6a26e33f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "data = pd.read_csv('../group8_final_project_ds202w/Data/data.csv', engine='python')"
      ],
      "id": "dc3c25bf",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# List of indicators\n",
        "indicators = [\n",
        "    'ag_lnd_frst_k2', 'ag_srf_totl_k2', 'bm_trf_pwkr_cd_dt', 'bn_klt_dinv_cd',\n",
        "    'bx_klt_dinv_cd_wd', 'cm_mkt_lcap_gd_zs', 'dt_dod_dect_cd', 'dt_oda_odat_pc_zs',\n",
        "    'dt_tds_dect_gn_zs', 'eg_use_elec_kh_pc', 'eg_use_pcap_kg_oe', 'en_atm_co2e_pc',\n",
        "    'er_gdp_fwtl_m3_kd', 'fp_cpi_totl_zg', 'gc_rev_xgrt_gd_zs', 'ic_reg_proc', 'it_cel_sets_p2',\n",
        "    'ms_mil_xpnd_gd_zs', 'ne_exp_gnfs_zs', 'ne_gdi_totl_zs', 'ne_imp_gnfs_zs', 'nv_agr_totl_zs',\n",
        "    'nv_ind_totl_zs', 'ny_gdp_defl_kd_zg', 'ny_gdp_mktp_cd', 'ny_gdp_mktp_kd_zg', 'ny_gdp_pcap_cd',\n",
        "    'ny_gnp_atls_cd', 'ny_gnp_mktp_pp_cd', 'ny_gnp_pcap_cd', 'ny_gnp_pcap_pp_cd', 'se_enr_prsc_fm_zs',\n",
        "    'se_prm_cmpt_zs', 'se_sec_enrr', 'sh_dyn_aids_zs', 'sh_dyn_mort', 'sh_imm_meas', 'sh_sta_brtc_zs',\n",
        "    'sh_sta_maln_zs', 'si_dst_frst_20', 'si_pov_nahc', 'sm_pop_netm', 'sp_ado_tfrt', 'sp_dyn_conu_zs',\n",
        "    'sp_dyn_le00_in', 'sp_dyn_tfrt_in', 'sp_pop_grow', 'sp_pop_totl', 'tg_val_totl_gd_zs', 'tt_pri_mrch_xd_wd',\n",
        "    'tx_val_tech_mf_zs'\n",
        "]\n",
        "\n",
        "# Helper function to standardize column names (convert to uppercase and replace underscores)\n",
        "def standardize_column_name(col):\n",
        "    return col.upper().replace('_', '.')\n",
        "\n",
        "# Fetch indicator name from the metadata URL\n",
        "def get_indicator_name(code):\n",
        "    url = f'https://databank.worldbank.org/metadataglossary/world-development-indicators/series/{code}'\n",
        "    response = requests.get(url)\n",
        "\n",
        "    if response.status_code == 200:\n",
        "        soup = BeautifulSoup(response.text, 'html.parser')\n",
        "        label_elements = soup.find_all(['td', 'div', 'span'])\n",
        "        \n",
        "        for i, tag in enumerate(label_elements):\n",
        "            if tag.get_text(strip=True) == \"Indicator Name\":\n",
        "                try:\n",
        "                    next_tag = label_elements[i + 1]\n",
        "                    return next_tag.get_text(strip=True)\n",
        "                except IndexError:\n",
        "                    return None  # Return None if the next tag is missing\n",
        "    return None\n",
        "\n",
        "# Create a dictionary for indicator code to name mapping\n",
        "indicator_names = {}\n",
        "for code in indicators:\n",
        "    standardized_code = standardize_column_name(code)  # Standardize the code to match metadata format\n",
        "    indicator_name = get_indicator_name(standardized_code)\n",
        "    indicator_names[standardized_code] = indicator_name if indicator_name else standardized_code\n",
        "\n",
        "# Now, assuming 'data' is your dataframe, we rename the columns\n",
        "column_mapping = {col: col for col in data.columns[:3]}  # Keep the first three columns unchanged\n",
        "\n",
        "# Map the remaining columns\n",
        "for col in data.columns[3:]:\n",
        "    standardized_col = standardize_column_name(col)  # Standardize the column name to match keys in indicator_names\n",
        "    column_mapping[col] = indicator_names.get(standardized_col, col)  # Map to indicator name if found, else keep original\n",
        "\n",
        "# Rename the columns in the dataframe\n",
        "data.rename(columns=column_mapping, inplace=True)\n",
        "\n",
        "# Print renamed dataframe columns\n",
        "print(data.columns)"
      ],
      "id": "344b7510",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#RENAMING THE COLUMNS THAT DONT GET SCRAPED FOR THEIR NAME EG NY.... (THIS IS THE GDP/GNI STUFF)\n",
        "\n",
        "# Dictionary mapping old column names to their descriptive equivalents\n",
        "rename_dict = {\n",
        "    'BN.KLT.DINV.CD': 'Foreign direct investment, net (BoP, current US$)',\n",
        "    'DT.DOD.DECT.CD': 'External debt stocks, total (DOD, current US$)',\n",
        "    'NY.GDP.MKTP.CD': 'GDP',\n",
        "    'NY.GDP.PCAP.CD': 'GDPPC',\n",
        "    'NY.GNP.ATLS.CD': 'GNI',\n",
        "    'NY.GNP.MKTP.PP.CD': 'GNIPPP',\n",
        "    'NY.GNP.PCAP.CD': 'GNIPC',\n",
        "    'NY.GNP.PCAP.PP.CD': 'GNIPCPPP'\n",
        "}\n",
        "#WILL COME IN HANDY FOR FUTURE UNSUPERVISED LEARNING TO HAVE THESE TOGETHER\n",
        "g_columns = ['GDP', 'GDPPC', 'GNI', 'GNIPPP', 'GNIPC', 'GNIPCPPP']\n",
        "\n",
        "# Apply renaming\n",
        "data.rename(columns=rename_dict, inplace=True)\n",
        "data.drop(columns='Unnamed: 0', inplace=True)"
      ],
      "id": "ecabce2f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "**Data cleaning**"
      ],
      "id": "c54bd1cf"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Group by year and compute the average % missing per year\n",
        "missing_by_year = (\n",
        "    data.groupby(\"year\")\n",
        "      .apply(lambda g: g.isna().mean().mean() * 100)  # % of missing values across all cols\n",
        ")\n",
        "\n",
        "# Show the results\n",
        "print(missing_by_year.round(2))\n",
        "\n",
        "# Optional: Plot it\n",
        "missing_by_year.plot(marker='o', figsize=(10, 4), title=\"Average % Missing Data by Year\")\n",
        "plt.ylabel(\"Missing Data (%)\")\n",
        "plt.grid(True)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "4e9b64a3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Group by 'country_code' and calculate average missing percentage\n",
        "missing_by_country = (\n",
        "    data.groupby(\"country_code\")\n",
        "        .apply(lambda g: g.isna().mean().mean() * 100)\n",
        "        .sort_values(ascending=False)\n",
        "        .round(2)\n",
        "        .reset_index(name=\"Missing %\")\n",
        ")\n",
        "\n",
        "# View top 10 countries with most missing data\n",
        "print(missing_by_country.head(10))\n",
        "# Optional: Plot the top 50 countries with most missing data    \n",
        "missing_by_country.head(50).plot(\n",
        "    x=\"country_code\", y=\"Missing %\", kind=\"bar\", legend=False, figsize=(10, 4), title=\"Top 10 Countries with Most Missing Data\"\n",
        ")\n",
        "plt.ylabel(\"Missing Data (%)\")\n",
        "plt.xticks(rotation=45)\n",
        "plt.grid(True)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "d4f33479",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Filter for the specific year (e.g., 2014)\n",
        "year = 2014\n",
        "data_year = data[data['year'] == year]\n",
        "\n",
        "# Extract indicator columns only (exclude 'year' and 'country_code')\n",
        "indicator_cols = data_year.columns.difference(['year', 'country_code'])\n",
        "\n",
        "# Calculate % missing data per indicator per country\n",
        "missing_matrix = data_year[indicator_cols].isna().groupby(data_year['country_code']).mean() * 100\n",
        "\n",
        "# Plot the heatmap\n",
        "plt.figure(figsize=(16, 16))\n",
        "sns.heatmap(missing_matrix, cmap=\"YlOrRd\", cbar_kws={'label': '% Missing'})\n",
        "plt.title(f\"Missing Data by Country and Indicator in {year}\")\n",
        "plt.xlabel(\"Indicator\")\n",
        "plt.ylabel(\"Country\")\n",
        "plt.xticks(rotation=90)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "2b6c5fa9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# # For each country, missing data by indicator in 2014 (can be used for explaining weird results in later analysis)\n",
        "# !pip install ace_tools_open\n",
        "# import ace_tools_open as tools\n",
        "\n",
        "# # Calculate % missing data per column (indicator) per country\n",
        "# missing_by_country_indicator = data_year.groupby('country_code').apply(lambda g: g[indicator_cols].isna().mean() * 100)\n",
        "\n",
        "# # Display the table to the user\n",
        "# tools.display_dataframe_to_user(name=\"Missing Data by Indicator per Country in 2014\", dataframe=missing_by_country_indicator.round(1))\n",
        "\n",
        "\n",
        "# #Initialize a dictionary to store missing data percentages by sector\n",
        "# missing_data_by_sector = {}\n",
        "\n",
        "# # Iterate through each sector and calculate missing percentages\n",
        "# for sector, indicators in sectors.items():\n",
        "#     # Filter to only include the selected indicators for each sector\n",
        "#     available_indicators = [col for col in indicators if col in data_year.columns]\n",
        "    \n",
        "#     # Calculate missing percentage by country for each indicator in the sector\n",
        "#     if available_indicators:\n",
        "#         missing_data_by_country = data_year[available_indicators].isna().groupby(data_year['country_code']).mean() * 100\n",
        "#         missing_data_by_sector[sector] = missing_data_by_country\n",
        "\n",
        "# # Combine into a single DataFrame for display\n",
        "# missing_data_combined = pd.concat(missing_data_by_sector, axis=1)\n",
        "\n",
        "# # Display the combined DataFrame\n",
        "# tools.display_dataframe_to_user(name=\"Missing Data by Country and Theme Indicators in 2014\", dataframe=missing_data_combined.round(1))"
      ],
      "id": "d27a416c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# import pandas as pd\n",
        "# import numpy as np\n",
        "# import requests\n",
        "# from bs4 import BeautifulSoup\n",
        "# from sklearn.preprocessing import StandardScaler\n",
        "# from sklearn.decomposition import PCA\n",
        "# from sklearn.ensemble import RandomForestClassifier\n",
        "# from sklearn.impute import SimpleImputer\n",
        "# from sklearn.pipeline import make_pipeline\n",
        "# from sklearn.model_selection import train_test_split\n",
        "# from sklearn.metrics import classification_report\n",
        "# import matplotlib.pyplot as plt\n",
        "# from sklearn.cluster import KMeans\n",
        "# import seaborn as sns\n",
        "# from sklearn.inspection import permutation_importance\n",
        "# from sklearn.cluster import KMeans\n",
        "# import seaborn as sns\n",
        "\n",
        "# --------------------------\n",
        "# Define 2014 income group thresholds (GNI per capita, PPP)\n",
        "income_bins = [0, 1045, 4125, 12735, float('inf')]\n",
        "income_labels = ['Low income', 'Lower middle income', 'Upper middle income', 'High income']\n",
        "\n",
        "# --------------------------\n",
        "# Filter and preprocess 2014 data\n",
        "data_2014 = data[data['year'] == 2014].copy()\n",
        "data_2014['income_group'] = pd.cut(\n",
        "    data_2014['GNIPC'],\n",
        "    bins=income_bins,\n",
        "    labels=income_labels\n",
        ")\n",
        "data_2014 = data_2014.dropna(subset=['income_group']).reset_index(drop=True)\n",
        "\n",
        "# Feature selection\n",
        "exclude_cols = ['year', 'income_group', [col for col in g_columns]]\n",
        "features = [col for col in data_2014.columns\n",
        "            if col not in exclude_cols and pd.api.types.is_numeric_dtype(data_2014[col])]\n",
        "\n",
        "X = data_2014[features]\n",
        "y = data_2014['income_group']\n",
        "\n",
        "# --------------------------\n",
        "# Preprocessing and modeling\n",
        "preprocessor = make_pipeline(\n",
        "    SimpleImputer(strategy='median'),\n",
        "    StandardScaler()\n",
        ")\n",
        "X_processed = preprocessor.fit_transform(X)\n",
        "\n",
        "pca = PCA(n_components=0.95)\n",
        "X_pca = pca.fit_transform(X_processed)\n",
        "\n",
        "loadings = pd.DataFrame(\n",
        "    pca.components_.T,\n",
        "    columns=[f'PC{i+1}' for i in range(pca.n_components_)],\n",
        "    index=features\n",
        ")\n",
        "\n",
        "top_features = []\n",
        "for pc in loadings.columns:\n",
        "    sorted_loadings = loadings[pc].abs().sort_values(ascending=False)\n",
        "    top_features.extend(sorted_loadings[:3].index.tolist())\n",
        "top_features = list(set(top_features))\n",
        "\n",
        "X_selected = pd.DataFrame(X_processed, columns=features)[top_features]\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X_selected, y,\n",
        "    test_size=0.2,\n",
        "    random_state=42,\n",
        "    stratify=y\n",
        ")\n",
        "\n",
        "model = RandomForestClassifier(n_estimators=200,\n",
        "                               class_weight='balanced',\n",
        "                               random_state=42)\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "feature_importance = pd.DataFrame({\n",
        "    'Feature': top_features,\n",
        "    'Importance': model.feature_importances_\n",
        "}).sort_values('Importance', ascending=False)\n",
        "\n",
        "# --------------------------\n",
        "# Results and visualization\n",
        "print(\"\\nMost Important Features:\")\n",
        "print(feature_importance.head(10))\n",
        "\n",
        "print(\"\\nClassification Report:\")\n",
        "print(classification_report(y_test, model.predict(X_test)))\n",
        "\n",
        "plt.figure(figsize=(12, 8))\n",
        "feature_importance.head(10).sort_values('Importance').plot.barh(\n",
        "    x='Feature', y='Importance',\n",
        "    title='Top 10 Predictive Indicators for Income Classification',\n",
        "    legend=False\n",
        ")\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "82ccab33",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Use the cleaned and prepared 2014 dataset\n",
        "data = data_2014.copy()\n",
        "\n",
        "# --------------------------\n",
        "# CLUSTERING (EXCLUDING GNI)\n",
        "# --------------------------\n",
        "\n",
        "# Define the GNI column to exclude\n",
        "\n",
        "\n",
        "# Exclude GNI from top PCA features\n",
        "filtered_features = [f for f in top_features if f != g_columns]\n",
        "print(\"Clustering based on top PCA features (excluding GNI):\", filtered_features)\n",
        "\n",
        "# Prepare data for clustering\n",
        "X_cluster = pd.DataFrame(X_processed, columns=features)[filtered_features].copy()\n",
        "\n",
        "# Reprocess for clustering\n",
        "cluster_preprocessor = make_pipeline(\n",
        "    SimpleImputer(strategy='median'),\n",
        "    StandardScaler()\n",
        ")\n",
        "X_cluster_processed = cluster_preprocessor.fit_transform(X_cluster)\n",
        "\n",
        "# Apply KMeans clustering\n",
        "kmeans = KMeans(n_clusters=4, init='k-means++', random_state=42)\n",
        "data['cluster_group'] = kmeans.fit_predict(X_cluster_processed)\n",
        "\n",
        "# Label clusters descriptively\n",
        "data['cluster_group_name'] = data['cluster_group'].apply(lambda x: f'Cluster Group {x+1}')\n",
        "\n",
        "# --------------------------\n",
        "# COMPARISON VISUALIZATION\n",
        "# --------------------------\n",
        "\n",
        "plt.figure(figsize=(14, 8))\n",
        "\n",
        "# Income group boxplot\n",
        "plt.subplot(1, 2, 1)\n",
        "sns.boxplot(x='income_group', y= 'GNIPC', data=data,\n",
        "            order=income_labels, palette='Set2')\n",
        "plt.title('GNI-based Classification')\n",
        "plt.xticks(rotation=45)\n",
        "plt.ylabel('GNI per capita (PPP)')\n",
        "\n",
        "# Cluster group boxplot\n",
        "plt.subplot(1, 2, 2)\n",
        "sns.boxplot(x='cluster_group_name', y= 'GNIPC', data=data,\n",
        "            order=[f'Cluster Group {i+1}' for i in range(4)],\n",
        "            palette='Set2')\n",
        "plt.title('Cluster-based Classification (Excluding GNI)')\n",
        "plt.xticks(rotation=45)\n",
        "plt.ylabel('')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "af978e31",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Use the processed 2014 data\n",
        "data = data_2014.copy()\n",
        "\n",
        "# --------------------------\n",
        "# CLUSTERING (EXCLUDING GNI)\n",
        "# --------------------------\n",
        "\n",
        "filtered_features = [f for f in top_features if f not in g_columns]\n",
        "print(\"Clustering based on top PCA features (excluding GNI and the likes):\", filtered_features)\n",
        "\n",
        "# Prepare and process data for clustering\n",
        "X_cluster = pd.DataFrame(X_processed, columns=features)[filtered_features].copy()\n",
        "cluster_preprocessor = make_pipeline(SimpleImputer(strategy='median'), StandardScaler())\n",
        "X_cluster_processed = cluster_preprocessor.fit_transform(X_cluster)\n",
        "\n",
        "# Apply KMeans clustering\n",
        "kmeans = KMeans(n_clusters=4, init='k-means++', random_state=42)\n",
        "data['cluster_group'] = kmeans.fit_predict(X_cluster_processed)\n",
        "data['cluster_group_name'] = data['cluster_group'].apply(lambda x: f'Cluster Group {x+1}')\n",
        "\n",
        "# --------------------------\n",
        "# COMPUTE CLUSTER DRIVERS\n",
        "# --------------------------\n",
        "perm_importance = permutation_importance(\n",
        "    kmeans, X_cluster_processed, data['cluster_group'],\n",
        "    scoring='accuracy', n_repeats=10, random_state=42, n_jobs=-1\n",
        ")\n",
        "\n",
        "# Organize importance into DataFrame\n",
        "cluster_drivers = pd.DataFrame({\n",
        "    'Feature': filtered_features,\n",
        "    'Importance': perm_importance.importances_mean\n",
        "}).sort_values('Importance', ascending=False)\n",
        "\n",
        "# Cluster centers (normalized feature values)\n",
        "cluster_centers = kmeans.cluster_centers_\n",
        "cluster_centers_normalized = pd.DataFrame(\n",
        "    cluster_centers, columns=filtered_features\n",
        ").T\n",
        "cluster_centers_normalized.columns = [f'Cluster {i+1}' for i in range(cluster_centers.shape[0])]\n",
        "\n",
        "# --------------------------\n",
        "# RENAME FEATURES FOR DISPLAY\n",
        "# --------------------------\n",
        "# Use existing column_mapping if available\n",
        "if 'column_mapping' in globals():\n",
        "    reverse_map = {v: v for v in filtered_features}\n",
        "    reverse_map.update(column_mapping)\n",
        "    renamed_features = [reverse_map.get(f, f) for f in filtered_features]\n",
        "else:\n",
        "    renamed_features = filtered_features  # Fallback\n",
        "\n",
        "cluster_drivers['Feature'] = renamed_features\n",
        "cluster_centers_normalized.index = renamed_features\n",
        "\n",
        "# --------------------------\n",
        "# VISUALIZATION\n",
        "# --------------------------\n",
        "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10), gridspec_kw={'width_ratios': [1, 2]})\n",
        "\n",
        "# Permutation Importance Bar Plot\n",
        "sns.barplot(x='Importance', y='Feature', data=cluster_drivers,\n",
        "            palette='viridis', ax=ax1)\n",
        "ax1.set_title('Key Drivers of Cluster Classification\\n', fontsize=14)\n",
        "ax1.set_xlabel('\\nPermutation Importance Score', fontsize=12)\n",
        "ax1.set_ylabel('Economic Indicators', fontsize=12)\n",
        "ax1.bar_label(ax1.containers[0], fmt='%.2f', padding=3)\n",
        "\n",
        "# Cluster Profile Heatmap\n",
        "sns.heatmap(cluster_centers_normalized, annot=True, cmap='coolwarm',\n",
        "            fmt=\".2f\", linewidths=.5, ax=ax2, cbar_kws={'label': 'Normalized Value'})\n",
        "ax2.set_title('Cluster Characteristics Profile\\n', fontsize=14)\n",
        "ax2.set_xlabel('\\nCluster Group', fontsize=12)\n",
        "ax2.set_ylabel('Economic Indicators', fontsize=12)\n",
        "ax2.set_yticklabels([])  # Hide vertical labels\n",
        "\n",
        "# Interpretation Note\n",
        "plt.figtext(0.5, -0.05,\n",
        "           \"\"\"Interpretation Guide:\n",
        "           1. Importance scores show which factors most differentiate clusters\n",
        "           2. Heatmap values show relative indicator levels in each cluster\n",
        "           3. Red = above average, Blue = below average\"\"\",\n",
        "           ha='center', fontsize=12, wrap=True)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.subplots_adjust(bottom=0.2, wspace=0.3)\n",
        "plt.show()"
      ],
      "id": "05be328b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Initial data exploration and clustering driver results show that while direct economic indicators like GDP and GNI are strong predictors, health, infrastructure, and demographic indicators also carry substantial predictive value. This reflects the multidimensional nature of development and justifies the use of themes in the future sections. Some impactful features include agriculutre value added, mortality rate under 5, life expectancy at birth, electric power consumption etc. These indicators suggest that using data apart from GNI can effectively capture complex socioeconomic dimensions such as financial market development, public health, demographic trends, and government spending priorities.\n",
        "\n",
        "In terms of initial analysis, I think this is a good start. We have identified 5 themes outisde of GNI that are important for measuring the dimensions of an economy. The themes are:\n",
        "1. Income and Output\n",
        "2. Infrastructure and Technology\n",
        "3. Trade and Investment\n",
        "4. Human Capital\n",
        "5. Institution Factors\n",
        "6. Health\n",
        "\n",
        "In order to explore these themes and to see how we should scale them accordinly, we need to standardize them to see how they compare to each other. We can scale them using Standard Scaler and compare them accordinly\n",
        "\n",
        "**Themes**"
      ],
      "id": "bca0dbd9"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "theme_mapping = {\n",
        "    'Income & Output': ['GDP', 'GDPPC', 'GNIPC', 'GNIPCPPP'],\n",
        "    \n",
        "    'Infrastructure & Technology': [\n",
        "        'Industry (including construction), value added (% of GDP)',\n",
        "        'Electric power consumption (kWh per capita)',\n",
        "        'Mobile cellular subscriptions (per 100 people)',\n",
        "        'High-technology exports (% of manufactured exports)'\n",
        "    ],\n",
        "    \n",
        "    'Trade & Investment': [\n",
        "        'Foreign direct investment, net inflows (BoP, current US$)',\n",
        "        'Exports of goods and services (% of GDP)',\n",
        "        'Imports of goods and services (% of GDP)',\n",
        "        'Merchandise trade (% of GDP)',\n",
        "        'High-technology exports (% of manufactured exports)',\n",
        "        'Gross capital formation (% of GDP)'\n",
        "    ],\n",
        "    \n",
        "    'Human Capital': [\n",
        "        'School enrollment, secondary (% gross)',\n",
        "        'Primary completion rate, total (% of relevant age group)',\n",
        "        'Start-up procedures to register a business (number)'\n",
        "    ],\n",
        "    \n",
        "    'Environmental': [\n",
        "        'CO2 emissions (metric tons per capita)',\n",
        "        'Forest area (sq. km)',\n",
        "        'Water productivity, total (constant 2015 US$ GDP per cubic meter of total freshwater withdrawal)',\n",
        "        'Agriculture, forestry, and fishing, value added (% of GDP)'\n",
        "    ],\n",
        "    \n",
        "    'Institutional Factors': [\n",
        "        'Military expenditure (% of GDP)',\n",
        "        'Total debt service (% of GNI)',\n",
        "        'Net ODA received per capita (current US$)',\n",
        "        'Personal remittances, paid (current US$)',\n",
        "        'Merchandise trade (% of GDP)'\n",
        "    ],\n",
        "\n",
        "    'Health': [\n",
        "        'Prevalence of HIV, total (% of population ages 15-49)',\n",
        "        'Mortality rate, under-5 (per 1,000 live births)',\n",
        "        'Immunization, measles (% of children ages 12-23 months)',\n",
        "        'Life expectancy at birth, total (years)'\n",
        "    ]\n",
        "}"
      ],
      "id": "8675385e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "all_theme_vars = [item for sublist in theme_mapping.values() for item in sublist]\n",
        "\n",
        "# See which are missing or mismatched\n",
        "unmatched = [col for col in data_2014.columns if col not in all_theme_vars and col not in ['country', 'country_code', 'year']]\n",
        "print(\"Variables not assigned to themes yet:\\n\", unmatched)"
      ],
      "id": "d60f604d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Drop high-missing columns\n",
        "high_missing_cols = [\n",
        "    'Electric power consumption (kWh per capita)',\n",
        "    'Energy use (kg of oil equivalent per capita)',\n",
        "    'Prevalence of underweight, weight for age (% of children under 5)',\n",
        "    'Contraceptive prevalence, any method (% of married women ages 15-49)'\n",
        "]\n",
        "\n",
        "data_2014_c = data_2014.drop(columns=high_missing_cols, errors='ignore')"
      ],
      "id": "b28fa719",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "standardized_df_14 = data_2014_c.copy()\n",
        "scaler = StandardScaler()\n",
        "\n",
        "for theme, cols in theme_mapping.items():\n",
        "    valid_cols = [col for col in cols if col in data_2014_c.columns]\n",
        "    standardized_df_14[valid_cols] = scaler.fit_transform(data_2014_c[valid_cols])"
      ],
      "id": "9856f030",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# list of negative indicators\n",
        "bad_list=['Mortality rate, under-5 (per 1,000 live births)',\n",
        "        'Prevalence of HIV, total (% of population ages 15-49)',\n",
        "        'Adolescent fertility rate (births per 1,000 women ages 15-19)',\n",
        "        'Start-up procedures to register a business (number)',\n",
        "        'Total debt service (% of GNI)']\n",
        "\n",
        "# Invert the direction of 'bad' indicators (higher = worse → higher = better after flipping)\n",
        "for col in bad_list:\n",
        "    standardized_df_14[col] = -standardized_df_14[col]\n",
        "\n",
        "#Mapping the z-score standardisation function\n",
        "for theme, cols in theme_mapping.items():\n",
        "    valid_cols = [col for col in cols if col in standardized_df_14.columns]\n",
        "    standardized_df_14[f'{theme}_Score'] = standardized_df_14[valid_cols].mean(axis=1)"
      ],
      "id": "9d377180",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "theme_score_cols = [col for col in standardized_df_14.columns if col.endswith('_Score')]\n",
        "standardized_df_14[theme_score_cols + ['country_code']].head(10)"
      ],
      "id": "869bad3c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "___\n",
        "\n",
        "We can have a brief exploration about how countries face against each other in numerous metrics and see whether this lines up"
      ],
      "id": "4079081b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Loop through each theme score and plot top and bottom 5 countries\n",
        "for score_col in theme_score_cols:\n",
        "    theme_name = score_col.replace('_Score', '')\n",
        "\n",
        "    # Drop NaNs for this score\n",
        "    score_data = standardized_df_14[['country_code', score_col]].dropna()\n",
        "\n",
        "    # Skip if too few countries to show both top and bottom\n",
        "    if score_data.shape[0] < 10:\n",
        "        continue\n",
        "\n",
        "    # Sort and select top/bottom\n",
        "    sorted_df = score_data.sort_values(by=score_col, ascending=False)\n",
        "    top5 = sorted_df.head(5)\n",
        "    bottom5 = sorted_df.tail(5)\n",
        "\n",
        "    # Combine for plotting\n",
        "    plot_df = pd.concat([top5, bottom5])\n",
        "    plot_df['Group'] = ['Top 5'] * 5 + ['Bottom 5'] * 5\n",
        "\n",
        "    # Plot\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    sns.barplot(data=plot_df, x='country_code', y=score_col, hue='Group', palette=['#2ecc71', '#e74c3c'])\n",
        "    plt.title(f'Best and Worst Performing Countries in {theme_name}')\n",
        "    plt.ylabel('Standardized Score')\n",
        "    plt.xlabel('Country Code')\n",
        "    plt.xticks(rotation=45)\n",
        "    plt.tight_layout()\n",
        "    plt.show()"
      ],
      "id": "0a9a7104",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "> **Top and Bottom Performers by Theme**  \n",
        ">\n",
        "> These bar charts spotlight the extremes in each development dimension—showing the five countries with the highest (green) and lowest (red) standardized scores. Rather than detailing every value (which you can read off the plot), the key takeaway is the **breadth** of variation:\n",
        "> \n",
        "> - **Human Capital & Health:** Small, high-income nations dominate the top ranks, while conflict-affected or low-income states fall to the bottom.  \n",
        "> - **Infrastructure & Institutions:** Wealthy, well-governed economies cluster at the top, underscoring the gap in basic services and governance capacity.  \n",
        "> - **Environmental & Trade:** Performance is more mixed, but clear outliers still show which countries lead or lag global benchmarks.  \n",
        "> \n",
        "> By focusing on these extremes, we confirm that no single country excels across all dimensions—and validate our **multidimensional index**. A univariate metric like GNI per capita would hide these theme-specific strengths and weaknesses, whereas our approach captures the true complexity of development.  \n",
        "\n",
        "### Next: Comparing with World Bank GNI-Based Income Groups 🧐\n",
        "\n",
        "To benchmark our multidimensional index against the standard approach, we replicate the World Bank’s four-tier income classification (low, lower-middle, upper-middle, high) using 2014 GNI per capita thresholds. By un-standardizing our GNI values back to USD and assigning each country to its corresponding income group, we can directly compare how well our Development Index and its thematic sub-scores align with—or diverge from—the World Bank’s income-only categorization. This side-by-side view clarifies where a composite measure adds insight beyond a single economic metric.  "
      ],
      "id": "374a63d5"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "mean_gnipc = data_2014_c['GNIPC'].mean()\n",
        "std_gnipc = data_2014_c['GNIPC'].std()\n",
        "\n",
        "# Unstandardize the 'GNIPC' values\n",
        "unstandardized_gnipc = standardized_df_14['GNIPC'] * std_gnipc + mean_gnipc\n",
        "\n",
        "# Define the classification function based on original GNI per capita\n",
        "def classify_income_unstandardized(gni_value):\n",
        "    if gni_value < 1046:\n",
        "        return 'Low income'\n",
        "    elif 1046 <= gni_value < 4126:\n",
        "        return 'Lower middle income'\n",
        "    elif 4126 <= gni_value < 12746:\n",
        "        return 'Upper middle income'\n",
        "    else:\n",
        "        return 'High income'\n",
        "\n",
        "# Apply the classification function to the unstandardized GNIPC values\n",
        "standardized_df_14['Income_Group'] = unstandardized_gnipc.apply(classify_income_unstandardized)\n",
        "\n",
        "# Check the unique income groups\n",
        "standardized_df_14['Income_Group'].unique()\n"
      ],
      "id": "5c27b63c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "for col in theme_score_cols:\n",
        "    plt.figure(figsize=(7, 5))\n",
        "    sns.boxplot(data=standardized_df_14, x='Income_Group', y=col)\n",
        "    plt.title(f'{col} by Income Group')\n",
        "    plt.xticks(rotation=45)\n",
        "    plt.tight_layout()\n",
        "    plt.show()"
      ],
      "id": "7b13a3a9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "for col in theme_score_cols:\n",
        "    if col != 'Income & Output_Score':\n",
        "        plt.figure(figsize=(6, 4))\n",
        "        sns.scatterplot(data=standardized_df_14, x='Income & Output_Score', y=col)\n",
        "        plt.title(f'{col} vs Income & Output Score')\n",
        "        plt.tight_layout()\n",
        "        plt.show()"
      ],
      "id": "8fee2ec3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Exploring Relationships with the Income & Output Theme ✍️ \n",
        "\n",
        "\n",
        "The series of scatterplots comparing each thematic score against the **Income & Output** score reveals how closely different dimensions of development align with raw economic output. We observe:\n",
        "\n",
        "- **Positive Correlations** in themes like Infrastructure & Technology and Trade & Investment, indicating that higher GDP‐related scores generally coincide with better connectivity and trade performance.\n",
        "- **Moderate Dispersion** in Human Capital and Health, suggesting that countries with similar income levels can still diverge significantly in education outcomes or life‐expectancy.\n",
        "- **Weak or Non‐Linear Patterns** in Environmental and Institutional Factors, where some high‐income states exhibit poor environmental performance (e.g. high CO₂ emissions) or complex governance challenges, and conversely, a few lower‐income countries punch above their weight on sustainability metrics.\n",
        "\n",
        "These visuals underscore that **income alone does not fully explain** other facets of development—validating the need for a multidimensional index that captures these nuanced relationships.  \n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "## Next Steps: Clustering and Comparative Analysis 🚶 \n",
        "\n",
        "\n",
        "To build on these insights, we will apply **K-means clustering** to our standardized thematic scores. By grouping countries into clusters based on all seven themes, we can:\n",
        "\n",
        "1. **Identify Development Archetypes**: Reveal natural country groupings that share similar profiles across income, health, education, environment, and institutions.  \n",
        "2. **Compare with Income Groups**: Examine how our theme-based clusters align with—or diverge from—the World Bank’s GNI per capita categories.  \n",
        "3. **Validate the Index**: Use clustering stability and silhouette scores to assess whether multidimensional groupings offer a more coherent classification than single-variable thresholds.\n",
        "\n",
        "This clustering analysis will solidify our argument that a composite, theme-driven approach delivers richer, more actionable insights than income alone.  \n"
      ],
      "id": "8698d3db"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "exclude = ['Income & Output_Score']  # adjust if needed\n",
        "score_cols = [col for col in theme_score_cols if col not in exclude]\n",
        "\n",
        "\n",
        "clustering_data = standardized_df_14[score_cols].dropna()\n",
        "\n",
        "kmeans = KMeans(n_clusters=4, random_state=42)\n",
        "clustering_data['Cluster'] = kmeans.fit_predict(clustering_data)\n",
        "\n",
        "# Merge back to country names if needed\n",
        "standardized_df_14.loc[clustering_data.index, 'Cluster'] = clustering_data['Cluster']"
      ],
      "id": "75b65c11",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "def plot_theme_counts(df, title):\n",
        "    # 1) Identify theme scores and medians (if not already done)\n",
        "    theme_scores = [c for c in df.columns if c.endswith('_Score')]\n",
        "    medians = df[theme_scores].median()\n",
        "\n",
        "    # 2) Build flags and counts\n",
        "    flags = df.set_index('country_code')[theme_scores].gt(medians).astype(int)\n",
        "    counts = flags.sum(axis=1).sort_values(ascending=False)\n",
        "\n",
        "    # 3) Plot\n",
        "    sns.set_theme(style=\"whitegrid\")\n",
        "    plt.figure(figsize=(8, 6))\n",
        "    palette = sns.light_palette(\"seagreen\", n_colors=len(counts), reverse=False)\n",
        "\n",
        "    ax = sns.barplot(\n",
        "        x=counts.values,\n",
        "        y=counts.index,\n",
        "        palette=palette,\n",
        "        edgecolor=\"black\"\n",
        "    )\n",
        "\n",
        "    # 4) Annotate\n",
        "    for i, v in enumerate(counts.values):\n",
        "        ax.text(v + 0.1, i, str(v), color='black', va='center')\n",
        "\n",
        "    # 5) Styling\n",
        "    ax.set_title(title, fontsize=14, pad=15)\n",
        "    ax.set_xlabel(\"Number of Themes Above Median\", fontsize=12)\n",
        "    ax.set_ylabel(\"Country Code\", fontsize=12)\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "\n",
        "# Plot for low-income countries\n",
        "plot_theme_counts(\n",
        "    standardized_df_14[standardized_df_14['Income_Group'] == 'Low income'],\n",
        "    \"Low-Income Countries: Themes Above Global Median (Descending)\"\n",
        ")"
      ],
      "id": "233423c2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "inertia = []\n",
        "for k in range(1, 11):  \n",
        "    kmeans = KMeans(n_clusters=k, random_state=42)\n",
        "    kmeans.fit(clustering_data)\n",
        "    inertia.append(kmeans.inertia_)\n",
        "\n",
        "# Plotting the elbow curve\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.plot(range(1, 11), inertia, marker='o')\n",
        "plt.title('Elbow Method for Optimal k')\n",
        "plt.xlabel('Number of clusters (k)')\n",
        "plt.ylabel('Inertia')\n",
        "plt.xticks(range(1, 11))\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "id": "77211e6c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Choosing Four Clusters (k = 4️⃣)\n",
        "\n",
        "Although the “elbow” in our inertia curve isn’t perfectly sharp at k = 4, it represents a clear inflection point where adding more clusters yields diminishing returns. Practically, four clusters strike a balance between capturing nuanced development profiles and maintaining interpretability. This choice also harmonizes with the World Bank’s four income groups—allowing us to directly compare our theme‐based clusters against low, lower-middle, upper-middle, and high-income quintiles in later analyses. By aligning our multidimensional clustering with an established four-tier framework, we ensure both methodological rigor and policy relevance.  \n"
      ],
      "id": "2ea94977"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "pd.crosstab(standardized_df_14['Income_Group'], standardized_df_14['Cluster'])"
      ],
      "id": "41bbdae1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import plotly.graph_objects as go\n",
        "import pandas as pd\n",
        "\n",
        "# Create crosstab\n",
        "flow_df = pd.crosstab(standardized_df_14['Income_Group'], standardized_df_14['Cluster'])\n",
        "\n",
        "# Prepare labels\n",
        "source_labels = list(flow_df.index)\n",
        "target_labels = [f\"Cluster {c}\" for c in flow_df.columns]\n",
        "all_labels = source_labels + target_labels\n",
        "\n",
        "# Prepare color palettes\n",
        "color_map = {\n",
        "    'Low income': '#636EFA',\n",
        "    'Lower middle income': '#EF553B',\n",
        "    'Upper middle income': '#00CC96',\n",
        "    'High income': '#AB63FA'\n",
        "}\n",
        "cluster_colors = ['#FFD700', '#FF7F0E', '#1F77B4', '#2CA02C']  # Choose 4 distinct colors\n",
        "\n",
        "node_colors = [color_map.get(label, 'grey') for label in source_labels] + cluster_colors\n",
        "\n",
        "# Sankey input: source, target, values\n",
        "source_indices = []\n",
        "target_indices = []\n",
        "values = []\n",
        "\n",
        "for i, income_group in enumerate(source_labels):\n",
        "    for j, cluster in enumerate(flow_df.columns):\n",
        "        count = flow_df.loc[income_group, cluster]\n",
        "        if count > 0:\n",
        "            source_indices.append(i)\n",
        "            target_indices.append(len(source_labels) + j)\n",
        "            values.append(count)\n",
        "\n",
        "# Sankey diagram\n",
        "fig = go.Figure(data=[go.Sankey(\n",
        "    arrangement=\"snap\",  # Helps spread nodes\n",
        "    node=dict(\n",
        "        pad=20,\n",
        "        thickness=30,\n",
        "        line=dict(color=\"black\", width=0.5),\n",
        "        label=all_labels,\n",
        "        color=node_colors\n",
        "    ),\n",
        "    link=dict(\n",
        "        source=source_indices,\n",
        "        target=target_indices,\n",
        "        value=values,\n",
        "        color=\"rgba(160,160,160,0.4)\"  # Optional: soft grey links\n",
        "    )\n",
        ")])\n",
        "\n",
        "fig.update_layout(\n",
        "    title_text=\"Flow from Income Groups to KMeans Clusters\",\n",
        "    font_size=12,\n",
        "    width=1000,\n",
        "    height=600\n",
        ")\n",
        "fig.show()"
      ],
      "id": "19d30898",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Mapping Income Groups into K-Means Clusters 🗺️\n",
        "\n",
        "The Sankey chart above visualizes how the World Bank’s 2014 GNI-per-capita bands (“Low,” “Lower middle,” “Upper middle,” “High”) feed into the four K-Means clusters derived from our PCA-weighted Development Index. Three patterns stand out:\n",
        "\n",
        "1. **High-income divergence**  \n",
        "   Contrary to a one-to-one mapping, high-income economies (purple node) now spread across two dominant clusters. A substantial flow goes into **Cluster 3** (green), our “top-tier” group with the strongest social and institutional metrics, while a non-trivial portion joins **Cluster 2** (blue), suggesting that even some wealthy economies under-perform on certain themes (e.g. governance or environmental indicators).\n",
        "\n",
        "2. **Low-income concentration**  \n",
        "   Most low-income countries (blue node) funnel into **Cluster 2**, the “under-served” archetype with weaker overall development profiles. Only a thin strand reaches **Cluster 0** (gold), indicating a handful of low-income outliers with stronger health or education outcomes.\n",
        "\n",
        "3. **Middle-band heterogeneity**  \n",
        "   - **Lower middle incomes** (red) split primarily between **Cluster 0** and **Cluster 2**, underscoring divergent pathways: some are catching up in infrastructure and human capital, while others remain closer to the weakest group.  \n",
        "   - **Upper middle incomes** (teal) send the largest share into **Cluster 0**—our “mid-pack” cluster with solid but not top scores—yet also feed significantly into Cluster 3 and Cluster 2, reflecting real variation in theme-based performance that GNI alone masks.\n",
        "\n",
        "**What this tells us:**  \n",
        "If income per capita were the sole driver, we’d see almost straight vertical flows (each income band mapping to one cluster). Instead, the fan-out—especially for the two middle bands and the split among high‐income countries—reveals that our multidimensional index captures meaningful subgroups within each GNI category. In other words, this Sankey confirms both the **overlap** (many upper middle incomes do align with stronger clusters) and the **divergence** (some high‐income outliers underperform on non-income dimensions) between traditional income classes and our PCA/K-Means development archetypes.\n",
        "\n",
        "Overall, the chart powerfully demonstrates why a purely monetary classification can overlook critical differences in health, education, environment and governance—differences our Development Index is explicitly designed to surface.\n",
        "\n",
        "🧪 Quick Analogy:\n",
        "\n",
        "Imagine clustering students by skills (math, writing, science) without using their test scores. Then compare those clusters to test score bands (e.g. A, B, C). If the clusters don’t align perfectly, it suggests the test score doesn’t reflect the full picture of their skills.\n",
        "\n",
        "### Visualizing Cluster Separation via PCA\n",
        "\n",
        "After standardizing our seven thematic scores, we project them into two dimensions using PCA and color by K-means cluster. The clear groupings in the scatterplot confirm that our four clusters capture distinct development archetypes—validating both our theme selection and the choice of k=4.\n"
      ],
      "id": "826d8095"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from sklearn.decomposition import PCA\n",
        "import seaborn as sns\n",
        "\n",
        "pca = PCA(n_components=2)\n",
        "components = pca.fit_transform(clustering_data.drop(columns='Cluster'))\n",
        "clustering_data['PCA1'] = components[:, 0]\n",
        "clustering_data['PCA2'] = components[:, 1]\n",
        "\n",
        "# Plot\n",
        "plt.figure(figsize=(8,6))\n",
        "sns.scatterplot(data=clustering_data, x='PCA1', y='PCA2', hue='Cluster', palette='tab10')\n",
        "plt.title('K-Means Clusters (PCA-reduced)')\n",
        "plt.show()"
      ],
      "id": "77fb3b0f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### GNI per Capita Distribution by Cluster 👫\n",
        "\n",
        "This box plot compares the standardized GNI per capita (GNIPC) across our four theme-driven clusters, helping us see where traditional income categories align—and diverge—from the multidimensional groupings.\n",
        "\n",
        "- **Cluster 1 (index 1)**  \n",
        "  - **Highest median GNIPC** and a wide interquartile range (IQR), confirming it contains the wealthiest economies.  \n",
        "  - The presence of outliers above +4 indicates a handful of exceptionally high-income nations.\n",
        "\n",
        "- **Cluster 3 (index 3)**  \n",
        "  - **Mid-range GNIPC** with a median close to zero and moderate spread, reflecting upper-middle performers on our composite index.  \n",
        "  - Some low and high outliers suggest this group mixes economies that income alone wouldn’t distinguish.\n",
        "\n",
        "- **Cluster 0 (index 0)**  \n",
        "  - **Lower median GNIPC**, below zero, but with a fatter upper whisker and several positive outliers—showing that some relatively well-off countries score lower on non-income themes (e.g. governance, environment).  \n",
        "\n",
        "- **Cluster 2 (index 2)**  \n",
        "  - **Lowest and tightest GNIPC distribution**, with most values well below zero and little spread, indicating the poorest economies also underperform across our thematic dimensions.\n",
        "\n",
        "**Key Takeaways**  \n",
        "1. **Overlap & Divergence**: While Clusters 1 and 2 map neatly to the top and bottom of the income spectrum, Clusters 0 and 3—despite overlapping GNIPC ranges—are separated by their composite performance.  \n",
        "2. **Beyond Income**: Countries with similar per-capita incomes may fall into different clusters because of divergent outcomes on health, education, infrastructure, and institutions.  \n",
        "3. **Nuanced Classification**: This plot underscores that income alone can’t capture the full development picture. Our PCA/K-Means clusters reveal latent groupings that traditional GNI bands miss, supporting a multidimensional approach to economic classification.  \n"
      ],
      "id": "2e8e6109"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "plt.figure(figsize=(8,6))\n",
        "sns.boxplot(data=standardized_df_14, x='Cluster', y='GNIPC')\n",
        "plt.title('GNI per Capita Distribution by Cluster')\n",
        "plt.show()"
      ],
      "id": "60034c0e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Effect of Including GNI in PCA 🤔\n",
        "\n",
        "Comparing explained‐variance curves for PCA with and without GNI shows that adding GNI slightly boosts variance captured by PC1 (from ~45% up to ~48%), but the overall component structure remains stable.  We therefore choose to **exclude** GNI from the Development Index construction to avoid redundancy—ensuring the index reflects truly multivariate patterns rather than income alone.\n"
      ],
      "id": "a4ddfb33"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Step 1: Define columns\n",
        "theme_cols = [col for col in standardized_df_14.columns if col.endswith('_Score') and 'Income & Output_Score' not in col]\n",
        "with_gni_cols = theme_cols + ['GNIPC']\n",
        "without_gni_cols = theme_cols  # already excludes 'Income & Output_Score'\n",
        "\n",
        "# Step 2: Drop NaNs based on full set of with_gni_cols (so both PCAs are based on same rows)\n",
        "common_index = standardized_df_14[with_gni_cols].dropna().index\n",
        "\n",
        "df_with_gni = standardized_df_14.loc[common_index, with_gni_cols]\n",
        "df_without_gni = standardized_df_14.loc[common_index, without_gni_cols]\n",
        "\n",
        "# Step 3: Run PCA with GNIPC\n",
        "pca_with_gni = PCA()\n",
        "components_with_gni = pca_with_gni.fit_transform(df_with_gni)\n",
        "loadings_with_gni = pd.DataFrame(\n",
        "    pca_with_gni.components_.T,\n",
        "    columns=[f'PC{i+1}' for i in range(len(with_gni_cols))],\n",
        "    index=with_gni_cols\n",
        ")\n",
        "\n",
        "# Step 4: Run PCA without GNIPC\n",
        "pca_without_gni = PCA()\n",
        "components_without_gni = pca_without_gni.fit_transform(df_without_gni)\n",
        "loadings_without_gni = pd.DataFrame(\n",
        "    pca_without_gni.components_.T,\n",
        "    columns=[f'PC{i+1}' for i in range(len(without_gni_cols))],\n",
        "    index=without_gni_cols\n",
        ")\n",
        "\n",
        "# Step 5: Assign Development Index from PC1 (without GNIPC)\n",
        "standardized_df_14.loc[common_index, 'Development_Index'] = components_without_gni[:, 0]\n",
        "\n",
        "# Step 6: Explained variance comparison\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(pca_with_gni.explained_variance_ratio_, label='With GNIPC', marker='o')\n",
        "plt.plot(pca_without_gni.explained_variance_ratio_, label='Without GNIPC', marker='x')\n",
        "plt.title(\"Explained Variance per PC\")\n",
        "plt.xlabel(\"Principal Component\")\n",
        "plt.ylabel(\"Explained Variance Ratio\")\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# Step 7: Print feature importance\n",
        "print(\"\\nTop features in PC1 (with GNIPC):\")\n",
        "print(loadings_with_gni['PC1'].sort_values(key=abs, ascending=False))\n",
        "\n",
        "print(\"\\nTop features in PC1 (without GNIPC):\")\n",
        "print(loadings_without_gni['PC1'].sort_values(key=abs, ascending=False))"
      ],
      "id": "dbe74a99",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### The Math Behind Our PCA-Derived Development Index 🤓\n",
        "\n",
        "Below is a clean derivation. Use single `$…$` for inline math, and put block equations between lines of `$$`.\n",
        "\n",
        "1. **Standardize each theme**  \n",
        "   For country $i$ and theme $j$, compute  \n",
        "   $$\n",
        "   z_{ij} = \\frac{x_{ij} - \\bar{x}_j}{s_j}\n",
        "   $$\n",
        "   where  \n",
        "   - $x_{ij}$ is the raw score  \n",
        "   - $\\bar{x}_j$ is the mean of theme $j$  \n",
        "   - $s_j$ is the standard deviation of theme $j$\n",
        "\n",
        "2. **Form the covariance matrix**  \n",
        "   Let $\\mathbf{Z}$ be the $N\\times T$ matrix of all $z_{ij}$. Then  \n",
        "   $$\n",
        "   \\mathbf{C} = \\frac{1}{N}\\,\\mathbf{Z}^\\top \\mathbf{Z}.\n",
        "   $$\n",
        "\n",
        "3. **Solve the eigenproblem**  \n",
        "   Find the unit‐length eigenvector $\\boldsymbol{\\ell}$ corresponding to the largest eigenvalue $\\lambda_{\\max}$:  \n",
        "   $$\n",
        "   \\mathbf{C}\\,\\boldsymbol{\\ell} = \\lambda_{\\max}\\,\\boldsymbol{\\ell},\n",
        "   \\quad \\|\\boldsymbol{\\ell}\\| = 1.\n",
        "   $$\n",
        "\n",
        "4. **Interpret the loadings**  \n",
        "   The loadings $\\ell_j$ show each theme’s weight on PC1.  Our computed loadings (without GNI) were:\n",
        "\n",
        "   | Theme                               | Loading $\\ell_j$ |\n",
        "   |-------------------------------------|-----------------:|\n",
        "   | Health\\_Score                       |           0.6193 |\n",
        "   | Human\\_Capital\\_Score               |           0.5811 |\n",
        "   | Trade\\_&\\_Investment\\_Score         |           0.3321 |\n",
        "   | Infrastructure\\_&\\_Technology\\_Score|           0.3203 |\n",
        "   | Institutional\\_Factors\\_Score       |           0.2536 |\n",
        "   | Environmental\\_Score                |           0.0382 |\n",
        "\n",
        "5. **Project each country onto PC1**  \n",
        "   Each country’s Development Index is  \n",
        "   $$\n",
        "   \\mathrm{DevIndex}_i = \\mathbf{z}_i^\\top \\boldsymbol{\\ell}\n",
        "   = \\sum_{j=1}^{T}\\ell_j\\,z_{ij}.\n",
        "   $$\n",
        "\n",
        "\n",
        "> **Why this matters:**  \n",
        "> Using the first eigenvector’s components as weights ensures our index highlights the themes that co-vary most strongly—capturing a data-driven “development” signal rather than relying on arbitrary weights.  \n"
      ],
      "id": "b5b8641c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# First, make sure the rows are aligned with their indices\n",
        "valid_rows = standardized_df_14[with_gni_cols].dropna().index\n",
        "\n",
        "# Now, we need to assign only to these rows where there was no missing data\n",
        "standardized_df_14.loc[valid_rows, 'Development_Index'] = components_without_gni[:, 0]"
      ],
      "id": "0ad4515e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Comparing GNI per Capita and Our PCA-Based Development Index ✍️\n",
        "\n",
        "Before diving into more complex models, it’s useful to check the **Pearson correlation** between standardized GNI per capita (GNIPC) and our PCA-derived Development Index. A moderate correlation (e.g. \\(r = 0.60\\)) tells us:\n",
        "\n",
        "- **Shared signal**: GNIPC captures a substantial—but not exhaustive—portion of the underlying “development” pattern that our multivariate index also identifies.  \n",
        "- **Added nuance**: Since \\(r<1\\), the Development Index brings in information from other thematic dimensions (health, human capital, infrastructure, etc.) that GNIPC alone misses.  \n",
        "- **Justification**: This initial sanity check confirms that our index is meaningfully related to income, yet still enriches the analysis by embedding broader, non-income factors into a single metric.  \n"
      ],
      "id": "bc617fe1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Prepare the data\n",
        "df = standardized_df_14[['country_code', 'GNIPC', 'Development_Index']].dropna().copy()\n",
        "\n",
        "# Fit linear regression model\n",
        "model = LinearRegression()\n",
        "model.fit(df[['GNIPC']], df['Development_Index'])\n",
        "df['Predicted_Dev'] = model.predict(df[['GNIPC']])\n",
        "df['Residuals'] = df['Development_Index'] - df['Predicted_Dev']\n",
        "\n",
        "# Identify top over- and under-performers\n",
        "top_residuals = df.sort_values(by='Residuals', ascending=False).head(5)\n",
        "bottom_residuals = df.sort_values(by='Residuals').head(5)\n",
        "\n",
        "# Plot regression + annotate key outliers\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.regplot(data=df, x='GNIPC', y='Development_Index', scatter_kws={'alpha': 0.6}, line_kws={'color': 'black'})\n",
        "\n",
        "for _, row in pd.concat([top_residuals, bottom_residuals]).iterrows():\n",
        "    plt.text(row['GNIPC'], row['Development_Index'], row['country_code'], fontsize=9)\n",
        "\n",
        "plt.title(\"Development Index vs GNIPC (with Outliers Annotated by Residuals)\")\n",
        "plt.xlabel(\"GNIPC (Standardised)\")\n",
        "plt.ylabel(\"Development Index (PC1)\")\n",
        "plt.grid(True)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "31125043",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Define which columns are our theme-score columns\n",
        "theme_scores = [c for c in standardized_df_14.columns if c.endswith(\"_Score\")]\n",
        "\n",
        "\n",
        "# Prepare the two inputs for clustering\n",
        "gnipc_input  = standardized_df_14[['GNIPC']].dropna()\n",
        "theme_input  = standardized_df_14[theme_scores].dropna()\n",
        "\n",
        "# Align their indexes so we only cluster on countries present in both\n",
        "common_index = gnipc_input.index.intersection(theme_input.index)\n",
        "gnipc_input  = gnipc_input.loc[common_index]\n",
        "theme_input  = theme_input.loc[common_index]\n",
        "\n",
        "# Fit two separate KMeans\n",
        "kmeans_gni    = KMeans(n_clusters=4, random_state=42).fit(gnipc_input)\n",
        "kmeans_theme  = KMeans(n_clusters=4, random_state=42).fit(theme_input)\n",
        "\n",
        "# Build the 'comparison' DataFrame\n",
        "comparison = pd.DataFrame({\n",
        "    'Cluster_GNIPC':   kmeans_gni.labels_,\n",
        "    'Cluster_Themes':  kmeans_theme.labels_\n",
        "}, index=common_index)\n",
        "\n",
        "#Run PCA on your theme scores\n",
        "scaler      = StandardScaler()\n",
        "themes_scl  = scaler.fit_transform(theme_input)\n",
        "pca_2d      = PCA(n_components=2)\n",
        "components  = pca_2d.fit_transform(themes_scl)\n",
        "\n",
        "comparison['PC1'] = components[:, 0]\n",
        "comparison['PC2'] = components[:, 1]\n",
        "\n",
        "# Now plot\n",
        "plt.figure(figsize=(12, 5))\n",
        "\n",
        "plt.subplot(1, 2, 1)\n",
        "sns.scatterplot(\n",
        "    data=comparison,\n",
        "    x='PC1', y='PC2',\n",
        "    hue='Cluster_GNIPC',\n",
        "    palette='Set1',\n",
        "    s=60, alpha=0.7\n",
        ")\n",
        "plt.title(\"Clustering by GNIPC\")\n",
        "\n",
        "plt.subplot(1, 2, 2)\n",
        "sns.scatterplot(\n",
        "    data=comparison,\n",
        "    x='PC1', y='PC2',\n",
        "    hue='Cluster_Themes',\n",
        "    palette='Set2',\n",
        "    s=60, alpha=0.7\n",
        ")\n",
        "plt.title(\"Clustering by Development Themes\")\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "1f404146",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Comparing Income‐Based vs. Theme‐Based Clusters 🔎\n",
        "\n",
        "When we project our seven development theme scores into two principal components and colour points by (1) GNI per capita clusters versus (2) theme‐based clusters, a clear story emerges:\n",
        "\n",
        "- **Income‐only clustering** tends to slice countries into vertical bands based strictly on log GNI per capita. While this separates very rich from very poor, it often lumps together nations with very different social, health, and institutional profiles.\n",
        "- **Theme‐based clustering** (right panel) draws groups according to the full multivariate “development fingerprint” of each country—so you see clusters of high-health/human-capital performers, infrastructure-heavy economies, trade-oriented states, etc., even when those share similar incomes.\n",
        "\n",
        "> **Key takeaway:** Using PCA on all themes reveals deeper nuance than income alone. Two countries with the same GNI bucket may belong to entirely different development clusters once we account for health, education, infrastructure, governance and environmental performance. Theme‐based clusters thus offer richer, more policy‐relevant groupings, so we’ll focus on these rather than an income‐only segmentation moving forward.\n"
      ],
      "id": "71ca6545"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "X_cluster = standardized_df_14[['Development_Index']].dropna()\n",
        "kmeans = KMeans(n_clusters=4, random_state=42)\n",
        "clusters = kmeans.fit_predict(X_cluster)\n",
        "\n",
        "# Add cluster labels back to the main dataframe\n",
        "standardized_df_14.loc[X_cluster.index, 'My_Dev_Group'] = clusters\n",
        "\n",
        "standardized_df_14.groupby('My_Dev_Group')[['Development_Index', 'GNIPC']].mean()"
      ],
      "id": "84a3f4c1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Translating a Continuous Development Index into Four Discrete “Development Bands” 🧠\n",
        "\n",
        "To make our PCA-derived Development Index more interpretable, we split it into four ordered categories—Low, Medium–Low, Medium–High, and High—by combining **quartile thresholds** with **K-Means centroids**.\n",
        "\n",
        "1. **Quartile thresholds**  \n",
        "   Compute the 25th, 50th, and 75th percentiles of the index (denoted $Q_1$, $Q_2$, $Q_3$) via the empirical CDF $F_D(x)$:\n",
        "   $$\n",
        "     Q_k \\;=\\; \\inf\\{\\,x : F_D(x)\\ge \\tfrac{k}{4}\\},\n",
        "     \\quad k=1,2,3.\n",
        "   $$\n",
        "\n",
        "2. **K-Means centroids**  \n",
        "   Run K-Means with $K=4$ on the one-dimensional index.  K-Means chooses centroids $\\{c_j\\}_{j=1}^4$ by minimizing:\n",
        "   $$\n",
        "     \\sum_{i=1}^N \\min_{1\\le j\\le4}\\,(D_i - c_j)^2,\n",
        "   $$\n",
        "   where $D_i$ is country $i$’s index value.  These centroids capture the natural “gaps” or modes in the distribution.\n",
        "\n",
        "3. **Mapping centroids to bands**  \n",
        "   Assign each centroid $c_j$ to a development band:\n",
        "   - If $c_j < Q_1$, label **Low Development**  \n",
        "   - Else if $c_j < Q_2$, label **Medium–Low Development**  \n",
        "   - Else if $c_j < Q_3$, label **Medium–High Development**  \n",
        "   - Else, label **High Development**\n",
        "\n",
        "4. **Assigning countries**  \n",
        "   Each country inherits the band of the centroid to which its index value was assigned by K-Means.\n",
        "\n",
        "\n",
        "\n",
        "### Why this hybrid approach?\n",
        "- **Quartiles** ensure roughly equal group sizes (≈25% per band) and are intuitively familiar.  \n",
        "- **Centroids** adapt to the data’s actual clustering—highlighting natural breaks rather than rigid percentiles.  \n",
        "- **Combining both** yields categories that are both statistically principled and easy to communicate, striking a balance between rigor and clarity.\n"
      ],
      "id": "32e76a5f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Step 1: Remove rows with NaN values in 'Development_Index' before clustering\n",
        "X_cluster = standardized_df_14[['Development_Index']].dropna()  # Drop rows with NaN in Development_Index\n",
        "\n",
        "# Step 2: Perform KMeans clustering\n",
        "kmeans = KMeans(n_clusters=4, random_state=42)\n",
        "kmeans.fit(X_cluster)\n",
        "\n",
        "# Step 3: Get the centroids and assign descriptive labels\n",
        "centroids = kmeans.cluster_centers_\n",
        "\n",
        "quantiles = standardized_df_14['Development_Index'].quantile([0.25, 0.5, 0.75]).values\n",
        "labels = []\n",
        "for centroid in centroids:\n",
        "    if centroid[0] < quantiles[0]:\n",
        "        labels.append('Low Development')\n",
        "    elif centroid[0] < quantiles[1]:\n",
        "        labels.append('Medium-Low Development')\n",
        "    elif centroid[0] < quantiles[2]:\n",
        "        labels.append('Medium-High Development')\n",
        "    else:\n",
        "        labels.append('High Development')\n",
        "\n",
        "\n",
        "# Step 4: Map cluster labels to the original data frame\n",
        "# First, create the cluster labels for the rows that were used in the clustering\n",
        "cluster_labels = [labels[cluster] for cluster in kmeans.labels_]\n",
        "\n",
        "# Create a new series for the 'Dev_Cluster_Label' column\n",
        "dev_cluster_labels = pd.Series([None] * len(standardized_df_14), index=standardized_df_14.index)\n",
        "\n",
        "# Assign the cluster labels to the corresponding rows in the original dataframe\n",
        "dev_cluster_labels[X_cluster.index] = cluster_labels\n",
        "\n",
        "# Step 5: Add the labels back to the original dataframe\n",
        "standardized_df_14['Dev_Cluster_Label'] = dev_cluster_labels\n",
        "\n",
        "# Check the results\n",
        "print(standardized_df_14[['Development_Index', 'My_Dev_Group', 'Dev_Cluster_Label']].head())\n"
      ],
      "id": "264d4d61",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#Checking what these unique classifications are!\n",
        "standardized_df_14['Dev_Cluster_Label'].unique()"
      ],
      "id": "7b1fcc87",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# 1) pull out the 2014 GDP series and copy\n",
        "gdp_2014 = (\n",
        "    data_2014\n",
        "    .loc[:, ['country_code', 'GDP growth (annual %)']]\n",
        "    .copy()\n",
        ")\n",
        "\n",
        "# 2) scale it into a new column\n",
        "scaler = StandardScaler()\n",
        "gdp_2014['GDP_growth'] = scaler.fit_transform(\n",
        "    gdp_2014[['GDP growth (annual %)']]\n",
        ")\n",
        "\n",
        "# 3) merge that back onto your already-filtered 2014 DataFrame\n",
        "standardized_df_14 = (\n",
        "    standardized_df_14\n",
        "    .merge(gdp_2014[['country_code', 'GDP_growth']],\n",
        "           on='country_code',\n",
        "           how='left')\n",
        ")"
      ],
      "id": "6b15d875",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "sns.pairplot(standardized_df_14[['Development_Index', 'GNIPC', 'GDP_growth']])\n",
        "plt.show()"
      ],
      "id": "6f931a48",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "**Bottom Line**\n",
        "\n",
        "- The PCA‐derived Development Index aligns closely with GNI per capita, confirming it robustly captures a “wealth” axis.  \n",
        "- Neither the Development Index nor income alone predict short-term GDP growth—lower-income countries often show stronger one-year growth, reflecting convergence dynamics.  \n",
        "- This reinforces that our index measures a stable, multivariate “development” signal, distinct from the cyclical ups and downs of GDP growth.  \n"
      ],
      "id": "18d07854"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Boxplot: Development Index by Custom Grouping\n",
        "sns.boxplot(x='Dev_Cluster_Label', y='Development_Index', data=standardized_df_14)\n",
        "plt.title('Development Index by Our Custom Grouping')\n",
        "plt.xlabel('Custom Group')\n",
        "plt.xticks(rotation=30)  # or try 45 or 60 for better visibility\n",
        "plt.show()\n",
        "\n",
        "# Boxplot: GDP Growth by Custom Grouping\n",
        "sns.boxplot(x='income_group', y='GDP_growth', data=standardized_df_14)\n",
        "plt.title('GDP Growth by Our Custom Grouping')\n",
        "plt.xlabel('Custom Group')\n",
        "plt.xticks(rotation=30)\n",
        "plt.show()\n",
        "\n",
        "\n",
        "sns.boxplot(x='Dev_Cluster_Label', y='GDP_growth', data=standardized_df_14)\n",
        "plt.title('GDP Growth by Our Custom Grouping')\n",
        "plt.xlabel('Custom Group')\n",
        "plt.xticks(rotation=30)\n",
        "plt.show()"
      ],
      "id": "ff664cb8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "**Key Takeaways from the Box-Plots**\n",
        "\n",
        "- Our PCA-based development bands show clear, stepwise increases in the Development Index from “Low” through “High,” confirming they’re well-separated.  \n",
        "- In contrast, the World Bank’s income groups yield highly overlapping GDP-growth distributions, with lower-income countries often outpacing richer peers.  \n",
        "- When we map GDP growth to our development bands, the trend becomes more intuitive: higher-development groups generally sit at or above average growth, while lower-development bands lag behind.  \n",
        "- Overall, these plots suggest our composite Development Index aligns more cleanly with economic performance than raw income categories, highlighting its usefulness (and the limitations of income alone).\n"
      ],
      "id": "1fe1f4db"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "flow_df = pd.crosstab(standardized_df_14['income_group'], standardized_df_14['Dev_Cluster_Label'])\n",
        "\n",
        "# Prepare labels for nodes\n",
        "source_labels = list(flow_df.index)  # Labels for the classification (e.g., 'Income_Group')\n",
        "target_labels = list(flow_df.columns)  # Labels for your custom clusters (e.g., 'Low Development', 'Medium-Low Development', etc.)\n",
        "all_labels = source_labels + target_labels  # Combine both for the Sankey diagram\n",
        "\n",
        "# Prepare color palettes for the nodes\n",
        "color_map = {\n",
        "    'Low income': '#636EFA',\n",
        "    'Lower middle income': '#EF553B',\n",
        "    'Upper middle income': '#00CC96',\n",
        "    'High income': '#AB63FA'\n",
        "}\n",
        "\n",
        "# Assign colors for the classification and clusters\n",
        "node_colors = [color_map.get(label, 'grey') for label in source_labels] + ['#FFD700', '#FF7F0E', '#1F77B4', '#2CA02C']  # Color for clusters\n",
        "\n",
        "# Prepare Sankey input: source, target, values\n",
        "source_indices = []\n",
        "target_indices = []\n",
        "values = []\n",
        "\n",
        "# Loop through the flow_df to get the source, target, and values\n",
        "for i, income_group in enumerate(source_labels):\n",
        "    for j, cluster in enumerate(flow_df.columns):\n",
        "        count = flow_df.loc[income_group, cluster]\n",
        "        if count > 0:\n",
        "            source_indices.append(i)\n",
        "            target_indices.append(len(source_labels) + j)\n",
        "            values.append(count)\n",
        "\n",
        "# Create the Sankey diagram\n",
        "fig = go.Figure(data=[go.Sankey(\n",
        "    arrangement=\"snap\",  # Helps spread nodes for better readability\n",
        "    node=dict(\n",
        "        pad=20,\n",
        "        thickness=30,\n",
        "        line=dict(color=\"black\", width=0.5),\n",
        "        label=all_labels,\n",
        "        color=node_colors\n",
        "    ),\n",
        "    link=dict(\n",
        "        source=source_indices,\n",
        "        target=target_indices,\n",
        "        value=values,\n",
        "        color=\"rgba(160,160,160,0.4)\"  # Optional: soft grey links\n",
        "    )\n",
        ")])\n",
        "\n",
        "# Customize the layout\n",
        "fig.update_layout(\n",
        "    title_text=\"Flow from Income Groups to Custom Clusters\",\n",
        "    font_size=12,\n",
        "    width=1000,\n",
        "    height=600\n",
        ")\n",
        "\n",
        "# Show the figure\n",
        "fig.show()"
      ],
      "id": "f6ec4608",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Flow from World Bank Income Groups to Our Development Bands 🔄\n",
        "\n",
        "This Sankey diagram visualizes how countries classified by the World Bank’s GNI bands map into our PCA-derived “development bands”:\n",
        "\n",
        "1. **Thicker flows = more countries.**  \n",
        "   - The bulk of **High-income** countries (purple) feed into our **High Development** band (gold), confirming strong alignment at the top end.  \n",
        "   - **Lower Middle-income** (red) and **Low-income** (blue) mostly flow into **Medium-Low** and **Low Development** bands (green/orange), again matching expectations.\n",
        "\n",
        "2. **Intermediate “mixed” flows reveal nuance.**  \n",
        "   - Not all **Upper Middle-income** economies (teal) land in **Medium-High**; several fall into **Medium-Low** or even **High Development**, highlighting how our multivariate index can pick out “over-achievers” (or “under-performers”) relative to income alone.\n",
        "\n",
        "3. **Why this matters:**  \n",
        "   - **Validation:** Strong diagonal (income ⇒ similar development band) shows our index broadly tracks GNI.  \n",
        "   - **Value-add:** Off-diagonal flows (e.g. upper-middle into high, or high into medium-high) expose where thematic strengths or weaknesses—like excellent human-capital or lagging infrastructure—distinguish countries beyond pure income.\n",
        "\n",
        "In short, the Sankey confirms that our PCA-based Development Index both **aligns** with familiar income categories and **adds extra granularity**, flagging countries that outperform or underperform relative to their income peers.  \n"
      ],
      "id": "8302caf1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from sklearn.metrics import silhouette_score\n",
        "\n",
        "# Dev Index clustering\n",
        "X_dev = standardized_df_14[['Development_Index']].dropna()\n",
        "score_dev = silhouette_score(X_dev, standardized_df_14.loc[X_dev.index, 'Dev_Cluster_Label'])\n",
        "\n",
        "# Theme-based KMeans\n",
        "X_themes = standardized_df_14[theme_scores].dropna()\n",
        "kmeans_themes = KMeans(n_clusters=4, random_state=42).fit(X_themes)\n",
        "score_theme = silhouette_score(X_themes, kmeans_themes.labels_)\n",
        "\n",
        "print(\"Silhouette Score - Dev Index Clustering:\", score_dev)\n",
        "print(\"Silhouette Score - Theme Score Clustering:\", score_theme)"
      ],
      "id": "f509f6a6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "pd.crosstab(standardized_df_14['Dev_Cluster_Label'], standardized_df_14['income_group'])"
      ],
      "id": "99271439",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Validating Our Development Bands with Cluster Cohesion & Income Alignment 🗣️\n",
        "\n",
        "To ensure our four “Development Bands” aren’t just visually appealing but also statistically coherent, we compute:\n",
        "\n",
        "1. **Silhouette Scores**  \n",
        "   - **Dev‐Index Clustering (silhouette = 0.55):** Strong separation, indicating the PCA‐derived index naturally splits into well‐defined groups.  \n",
        "   - **Theme‐Score Clustering (silhouette = 0.24):** Much weaker cohesion when clustering on raw theme scores alone, underscoring the value of our single composite index.\n",
        "\n",
        "2. **Cross‐tabulation vs. Income Groups**  \n",
        "   By cross‐tallying each band against the World Bank’s income categories, we see that:\n",
        "   - **High Development** almost exclusively captures “High income” economies.  \n",
        "   - **Medium‐High** blends upper‐middle and high‐income countries.  \n",
        "   - **Medium‐Low** and **Low Development** likewise align sensibly with lower‐middle and low‐income groups.\n",
        "\n",
        "Together with our Sankey diagram, these checks confirm that (a) our bands are both internally consistent and (b) meaningfully reflect established income tiers—supporting the index’s validity for comparative analysis.  \n"
      ],
      "id": "dc0ff9ab"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import wbgapi as wb\n",
        "import pandas as pd\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import r2_score\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# 1) Define all seven 2023 indicators\n",
        "indicators = {\n",
        "    \"SP.DYN.LE00.IN\":    \"Life_Expectancy_2023\",\n",
        "    \"EG.ELC.ACCS.ZS\":    \"Electricity_Access_2023\",\n",
        "    \"NY.GDP.PCAP.CD\":    \"GDP_per_Capita_2023\",\n",
        "    \"SH.DYN.MORT\":       \"Under5_Mortality_2023\",\n",
        "    \"SE.ADT.1524.LT.ZS\": \"Youth_Literacy_2023\",\n",
        "    \"IT.NET.USER.ZS\":    \"Internet_Users_2023\",\n",
        "    \"SI.POV.DDAY\":       \"Poverty_Rate_2023\",\n",
        "    \"SP.POP.SCIE.RD.P6\":   \"Researchers in R&D\",\n",
        "    \"SE.PRM.CMPT.FE.ZS\":  \"Primary completion rate, F\",\n",
        "    \"SL.EMP.VULN.FE.ZS\":  \"% Vulnerable employment, F\"\n",
        "}\n",
        "\n",
        "# 2) Fetch 2023 data (ISO-3 codes) exactly as you did\n",
        "frames = []\n",
        "for code, name in indicators.items():\n",
        "    df = wb.data.DataFrame(code, time=2023, labels=False).reset_index()\n",
        "    df = df.rename(columns={\"economy\": \"country_code\", code: name})\n",
        "    frames.append(df[[\"country_code\", name]])\n",
        "\n",
        "# 3) Merge all into df_2023\n",
        "df_2023 = frames[0]\n",
        "for frame in frames[1:]:\n",
        "    df_2023 = df_2023.merge(frame, on=\"country_code\")\n",
        "print(f\"Rows in 2023 pull: {df_2023.shape[0]}\")\n",
        "\n",
        "# 4) Merge with your 2014 data\n",
        "df_2014 = standardized_df_14.reset_index()   # brings country_code back as a column\n",
        "merged = pd.merge(df_2014, df_2023, on=\"country_code\")\n",
        "print(f\"Rows after merge with 2014 Dev Index: {merged.shape[0]}\")\n",
        "\n",
        "# 5) Plot & compute R² for each outcome and compare with GNI\n",
        "predictors = {\n",
        "    \"Development Index (2014)\": \"Development_Index\",\n",
        "    \"GNI per capita (2014)\"  : \"GNIPC\"\n",
        "}\n",
        "\n",
        "for outcome in indicators.values():\n",
        "    # drop missing\n",
        "    df = merged[[\"Development_Index\", \"GNIPC\", outcome]].dropna()\n",
        "    n = len(df)\n",
        "    print(f\"\\n=== Predicting 2023 {outcome.replace('_',' ')} — {n} observations ===\")\n",
        "    \n",
        "    fig, axes = plt.subplots(1, 2, figsize=(12,4), sharey=True)\n",
        "    for ax, (label, col) in zip(axes, predictors.items()):\n",
        "        sns.regplot(\n",
        "            data=df, x=col, y=outcome,\n",
        "            scatter_kws={'alpha':0.6}, line_kws={'color':'black'},\n",
        "            ax=ax\n",
        "        )\n",
        "        ax.set_title(f\"{label} → {outcome.replace('_',' ')}\")\n",
        "        ax.set_xlabel(label)\n",
        "        ax.set_ylabel(outcome.replace('_',' '))\n",
        "        ax.grid(True)\n",
        "        \n",
        "        r2 = r2_score(df[outcome], LinearRegression().fit(df[[col]], df[outcome]).predict(df[[col]]))\n",
        "        ax.text(\n",
        "            0.05, 0.90,\n",
        "            f\"R² = {r2:.3f}\",\n",
        "            transform=ax.transAxes,\n",
        "            bbox=dict(boxstyle=\"round,pad=0.3\", facecolor=\"white\", alpha=0.7)\n",
        "        )\n",
        "    \n",
        "    plt.tight_layout()\n",
        "    plt.show()"
      ],
      "id": "0dc7ad4c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Predicting Key 2023 Development Outcomes from 2014 Data - Our Robustness check 👀\n",
        "\n",
        "To demonstrate that our multivariate **Development Index**—derived via PCA on seven thematic pillars—captures deeper aspects of a country’s trajectory than income alone, we ran a series of pairwise regressions predicting ten flagship indicators in 2023.  In each case, we compare:\n",
        "\n",
        "- **Development Index (2014)**: a composite score summarizing health, human capital, institutions, infrastructure, trade, environment and (optionally) GNI per capita  \n",
        "- **GNI per Capita (2014)**: the World Bank’s standard measure of average income  \n",
        "\n",
        "Below we describe **why** we chose this approach, **what** the ten outcomes represent, and **how** the results shed light on both theory and data practice.\n",
        "\n",
        "---\n",
        "\n",
        "### 1. Why a Multivariate Index vs. Income Alone?\n",
        "\n",
        "Economists and development scholars have long argued that **income is necessary but not sufficient** for broader welfare:  \n",
        "- **Health and longevity** depend on public goods and social spending, not just individual purchasing power.  \n",
        "- **Education and digital access** (literacy rates, internet penetration) require investments in schools, networks and institutional capacity.  \n",
        "- **Social inclusion** (e.g. vulnerable employment, poverty rates) reflects labor regulations, gender norms and social safety nets.  \n",
        "\n",
        "By combining seven theme‐scores into a single index—each theme itself standardized and weighted by its loading on the first principal component—we surface the **shared “development signal”** across these domains. We then ask: does this richer signal from 2014 better predict real-world outcomes in 2023 than income alone?\n",
        "\n",
        "---\n",
        "\n",
        "### 2. Choice of 2023 Indicators\n",
        "\n",
        "We selected ten indicators that span economic, social and technological dimensions:\n",
        "\n",
        "1. **Life Expectancy** (SP.DYN.LE00.IN) – a standard barometer of public health  \n",
        "2. **Electricity Access** (EG.ELC.ACCS.ZS) – critical infrastructure for modern life  \n",
        "3. **GDP per Capita** (NY.GDP.PCAP.CD) – to test how much “new” it adds relative to GNI  \n",
        "4. **Under‐5 Mortality** (SH.DYN.MORT) – a sensitive measure of health equity  \n",
        "5. **Youth Literacy** (SE.ADT.1524.LT.ZS) – education outcomes for the next generation  \n",
        "6. **Internet Users** (IT.NET.USER.ZS) – proxy for technology diffusion  \n",
        "7. **Poverty Rate** (SI.POV.DDAY) – extreme poverty share  \n",
        "8. **Researchers in R&D** (SP.POP.SCIE.RD.P6) – innovation capacity  \n",
        "9. **Primary Completion (Female)** (SE.PRM.CMPT.FE.ZS) – gendered educational attainment  \n",
        "10. **Vulnerable Female Employment** (SL.EMP.VULN.FE.ZS) – informal sector risk  \n",
        "\n",
        "Some series (e.g. researchers in R&D, youth literacy) are only reported for a handful of countries in 2023. We included them anyway to **highlight data coverage gaps** and underscore how a composite index can still deliver insights even when individual series are patchy.\n",
        "\n",
        "---\n",
        "\n",
        "### 3. Methodological Overview\n",
        "\n",
        "For each outcome, we:\n",
        "\n",
        "1. **Merged** our 2014 Development Index and GNI per capita (log‐standardized) with the corresponding 2023 indicator, dropping missing pairs.  \n",
        "2. **Fit** two separate OLS regressions—one with the Development Index as the sole predictor, one with GNI per capita.  \n",
        "3. **Plotted** the scatter with fitted line and reported the coefficient of determination (R²).  \n",
        "\n",
        "This univariate framing isolates the **incremental predictive power** of our composite index versus income alone.\n",
        "\n",
        "---\n",
        "\n",
        "### 4. Key Findings & Interpretation 🤯\n",
        "#### Key Results (R² values)\n",
        "\n",
        "| Outcome                       | Dev-Index R² | GNI per Capita R² |\n",
        "|-------------------------------|-------------:|------------------:|\n",
        "| Life Expectancy               |        0.725 |             0.436 |\n",
        "| Electricity Access            |        0.493 |             0.119 |\n",
        "| GDP per Capita                |        0.397 |             0.911 |\n",
        "| Under-5 Mortality (↓)         |        0.671 |             0.219 |\n",
        "| Female Primary Completion     |        0.180 |             0.123 |\n",
        "| Youth Literacy                |        0.684 |             0.322 |\n",
        "| Internet Users                |        0.405 |             0.267 |\n",
        "| Poverty Rate (↓)              |        0.493 |             0.142 |\n",
        "| Researchers in R&D            |        0.379 |             0.071 |\n",
        "| % Vulnerable Female Employment|        0.611 |             0.363 |\n",
        "\n",
        "\n",
        "- **Life Expectancy, Electricity Access, Under‐5 Mortality**  \n",
        "  - Development Index R² ≈ 0.50–0.73 vs. GNI R² ≈ 0.12–0.44  \n",
        "  - _Interpretation_: Countries that scored high across multiple themes (health systems, infrastructure, institutions) in 2014 enjoyed **greater longevity** and more universal electrification by 2023 than could be explained by income alone.\n",
        "\n",
        "- **Education & Technology** (Youth Literacy, Internet Users, Female Primary Completion)  \n",
        "  - Development Index R² ≈ 0.18–0.68 vs. GNI R² ≈ 0.07–0.32  \n",
        "  - _Interpretation_: Educational achievements and digital connectivity are driven not just by wealth but by sustained investments in human capital, governance, and infrastructure—captured by our multivariate index.\n",
        "\n",
        "- **Social‐Welfare Metrics** (Poverty Rate, Vulnerable Employment, R&D Researchers)  \n",
        "  - Development Index R² ≈ 0.40–0.62 vs. GNI R² ≈ 0.13–0.37  \n",
        "  - _Interpretation_: Informal employment and extreme poverty reflect institutional strength and social protections. Our index’s superior fit underscores the need to look beyond average incomes when designing social policy.\n",
        "\n",
        "- **Economic Output** (GDP per Capita)  \n",
        "  - Development Index R² ≈ 0.40 vs. GNI R² ≈ 0.91  \n",
        "  - _Interpretation_: As expected, GNI per capita nearly perfectly predicts future GDP per capita—both measure very similar concepts. Our index adds less value here, which actually validates the coherence of both measures.\n",
        "\n",
        "---\n",
        "\n",
        "### 5. Implications for Policy & Research\n",
        "\n",
        "1. **Multidimensional Development**:  Income‐only metrics miss crucial aspects of well‐being.  A composite Development Index can guide more holistic policy interventions.  \n",
        "2. **Data Gaps & Coverage**:  By showing reasonable predictive power even for sparsely reported indicators, our approach argues for continued investment in broad, standardized data collection.  \n",
        "3. **Longitudinal Utility**:  A 2014‐based index retains predictive relevance nearly a decade later—demonstrating its robustness and potential for forecasting.  \n",
        "4. **Defending Our Argument**:  When the question is “What truly drives improvements in human welfare?”, these results underline that **multivariate, theme‐based measures** offer both stronger explanatory power and richer policy insight than income alone.\n"
      ],
      "id": "b460fcd4"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        ")\n",
        "\n",
        "# =============================================================================\n",
        "# 1) Fix NumPy floating‐error policy so underflows don't raise\n",
        "# =============================================================================\n",
        "# Turn underflow into a harmless warning\n",
        "np.seterr(under='ignore')  \n",
        "\n",
        "# =============================================================================\n",
        "# 2) Your data and outcomes\n",
        "# =============================================================================\n",
        "# merged: your DataFrame that has Development_Index, GNIPC, and all the *_2023 columns\n",
        "# Make sure you've already loaded it, e.g.:\n",
        "# merged = pd.read_csv('path/to/your/merged.csv')\n",
        "\n",
        "outcomes = [\n",
        "    \"Life_Expectancy_2023\",\n",
        "    \"Electricity_Access_2023\",\n",
        "    \"GDP_per_Capita_2023\",\n",
        "    \"Under5_Mortality_2023\",\n",
        "    \"Youth_Literacy_2023\",\n",
        "    \"Internet_Users_2023\",\n",
        "    \"Poverty_Rate_2023\"\n",
        "]\n",
        "\n",
        "# =============================================================================\n",
        "# 3) Set up the imputer and metrics helper\n",
        "# =============================================================================\n",
        "knn_imp = KNNImputer(n_neighbors=5)\n",
        "\n",
        "def print_metrics(label, y_true, y_pred):\n",
        "    r2  = r2_score(y_true, y_pred)\n",
        "    mae = mean_absolute_error(y_true, y_pred)\n",
        "    rmse = np.sqrt(mean_squared_error(y_true, y_pred))\n",
        "    print(f\"{label:25s} R²: {r2: .3f}   MAE: {mae: .2f}   RMSE: {rmse: .2f}\")\n",
        "\n",
        "# =============================================================================\n",
        "# 4) Loop over each outcome, impute, split, train, and evaluate\n",
        "# =============================================================================\n",
        "for outcome in outcomes:\n",
        "    print(f\"\\n=== {outcome} ===\")\n",
        "    \n",
        "    # select the two predictors + the outcome\n",
        "    raw = merged[[\"Development_Index\", \"GNIPC\", outcome]]\n",
        "    \n",
        "    # Convert to numpy arrays for the imputer\n",
        "    X_raw = raw[[\"Development_Index\", \"GNIPC\"]].values.astype(np.float64)\n",
        "    y_raw = raw[[outcome]].values.astype(np.float64)\n",
        "    \n",
        "    # Impute missing Development_Index and GNIPC\n",
        "    X = knn_imp.fit_transform(X_raw)\n",
        "    \n",
        "    # Only keep rows where the outcome is present\n",
        "    mask = ~np.isnan(y_raw).ravel()\n",
        "    X, y = X[mask], y_raw.ravel()[mask]\n",
        "    \n",
        "    if len(y) < 2:\n",
        "        print(\"Not enough data, skipping.\")\n",
        "        continue\n",
        "    \n",
        "    # Train/test split\n",
        "    Xtr, Xte, ytr, yte = train_test_split(\n",
        "        X, y, test_size=0.3, random_state=42\n",
        "    )\n",
        "    \n",
        "    # Train models on Development_Index only (column 0)\n",
        "    lr_dev = LinearRegression().fit(Xtr[:, [0]], ytr)\n",
        "    rf_dev = RandomForestRegressor(\n",
        "        n_estimators=100, random_state=42\n",
        "    ).fit(Xtr[:, [0]], ytr)\n",
        "    \n",
        "    # Train models on GNIPC only (column 1)\n",
        "    lr_gni = LinearRegression().fit(Xtr[:, [1]], ytr)\n",
        "    rf_gni = RandomForestRegressor(\n",
        "        n_estimators=100, random_state=42\n",
        "    ).fit(Xtr[:, [1]], ytr)\n",
        "    \n",
        "    # Build predictions dict\n",
        "    preds = {\n",
        "        \"LinearReg DevIdx\": lr_dev.predict(Xte[:, [0]]),\n",
        "        \"RandomForest DevIdx\": rf_dev.predict(Xte[:, [0]]),\n",
        "        \"LinearReg GNI\": lr_gni.predict(Xte[:, [1]]),\n",
        "        \"RandomForest GNI\": rf_gni.predict(Xte[:, [1]]),\n",
        "    }\n",
        "    \n",
        "    # Print metrics for each\n",
        "    for label, ypred in preds.items():\n",
        "        print_metrics(label, yte, ypred)"
      ],
      "id": "3883b612",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Supplementary Check: Ensemble Models on 2014 Predictors 💥\n",
        "\n",
        "As a robustness exercise—and not our primary comparison—we also fitted two off-the-shelf regressors (Linear Regression and Random Forest) to see whether a more flexible model changes the story. The steps here mirror the earlier analyses but add:\n",
        "\n",
        "1. **KNN Imputation** (k=5) for any missing Development Index or GNI values  \n",
        "2. **70/30 Train-Test Split** on each outcome’s cleaned sample  \n",
        "3. **Two Models** per predictor:  \n",
        "   - **Linear Regression** (baseline)  \n",
        "   - **Random Forest** (non-linear, interaction-friendly)  \n",
        "4. **Metrics**: R², MAE, RMSE, all computed on the held-out test set  \n",
        "\n",
        "### Results Snapshot\n",
        "| **Outcome**             | **Best R² (DevIdx)** | **Best R² (GNI)**  | **Note**                                                      |\n",
        "|-------------------------|---------------------:|-------------------:|---------------------------------------------------------------|\n",
        "| **Life Expectancy**     | 0.708 (LR)           | 0.510 (RF)         | DevIdx leads on health prediction.                           |\n",
        "| **Electricity Access**  | 0.469 (RF)           | 0.540 (RF)         | GNI slightly outperforms DevIdx on electricity access.        |\n",
        "| **GDP per Capita**      | 0.334 (LR)           | 0.841 (LR)         | GNI dominates economic‐output forecasts (as expected).        |\n",
        "| **Under-5 Mortality**   | 0.711 (LR)           | 0.459 (RF)         | DevIdx gives much better fit for child mortality.            |\n",
        "| **Youth Literacy**      | –25.527 (RF)         | –2.958 (RF)        | Both models perform terribly (neg. R²); needs richer features.|\n",
        "| **Internet Users**      | 0.658 (RF)           | 0.689 (RF)         | GNI edges out DevIdx for digital uptake, though both strong. |\n",
        "| **Poverty Rate**        | –0.534 (LR)          | –0.610 (RF)        | Neither model captures extreme poverty well.                 |\n",
        "\n",
        "> *Negative R² indicates performance worse than predicting the mean.*\n",
        "\n",
        "### Takeaways\n",
        "\n",
        "- **Consistent Winner**: Even under a more flexible Random Forest, the Development Index outperforms GNI for core health and infrastructure outcomes.  \n",
        "- **Expected Trade-off**: GNI remains the best single predictor of future GDP—no surprise, since both measure income.  \n",
        "- **Edge Cases Remain Edge**: Literacy and poverty rates are poorly captured by either predictor, highlighting data limitations and the need for richer covariates.  \n",
        "- **Role of This Check**: This ensemble-based test reinforces (rather than replaces) our main regression results, confirming that the PCA-derived Index holds up even when you allow for non-linear relationships and interactions.  \n",
        "\n",
        "## Conclusion 🎉\n",
        "\n",
        "Our analysis demonstrates that a multidimensional, PCA‐derived Development Index can capture aspects of national progress that GNI per capita alone overlooks. A potiental improvement we can include is adding how well a country is prepared for the worsening affects of climate change (droughts, flooding, natural disasters, etc.), in the past 20 years accoridng to the world economic forum has lost 2.8 trillion worldwide. First, cluster validation with silhouette scores (≈0.55 for DevIndex vs. ≈0.25 for raw themes) and Sankey flows confirmed that our four “development bands” not only align broadly with World Bank income groups but also reveal important outliers—upper‐middle–income countries that outperform on health and education, or high‐income states that lag on infrastructure. The clean separation of medians and interquartile ranges in our boxplots further underscores the statistical coherence of these bands.\n",
        "\n",
        "When we move to predicting key 2023 outcomes—life expectancy, electricity access, under‐5 mortality, literacy, internet usage, poverty, R&D capacity—the 2014 Development Index consistently explains far more variation (R² often between 0.40 and 0.72) than GNI per capita (typically 0.10 to 0.44), with the notable exception of GDP per capita itself (where GNI’s near‐perfect R² ≈ 0.90 is unsurprising). Even under a flexible Random Forest framework, the composite index retains its edge on social, health, and infrastructure metrics, while income unsurprisingly dominates purely economic predictions.\n",
        "\n",
        "That said, GNI per capita remains invaluable for routine classification: it is updated annually, has near‐complete country coverage, and ties directly into financial and poverty benchmarks. Our Development Index, by contrast, requires assembling multiple themes and standardizing them—but in return offers a richer, forward‐looking gauge of human welfare. For researchers and policymakers seeking to track progress beyond GDP, we recommend using the DevIndex alongside GNI bands: income for quick, transparent grouping, and the composite index for deeper insight into multidimensional development.  \n"
      ],
      "id": "a57979ad"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/rishisiddharth/.pyenv/versions/3.11.8/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}